import type { NextPage } from 'next'
import Head from 'next/head'
import Cropper from 'react-easy-crop'
import React, { useState, useCallback, useMemo, useRef, createRef } from 'react'
import { Area } from 'react-easy-crop/types'
import { getOutput } from '@/utils/image'
import axios from 'axios';
import { QueryClient, QueryClientProvider, useMutation } from 'react-query'
import { IData } from './api/recog'
import { loginByGithub } from '@/services/submitface';
import { SubmitPage } from '@/components/submit'
import Image from 'next/image'

const api = '/api/recog';


const Home: NextPage = () => {

  const mutation = useMutation<IData, unknown, Blob>(api, (file: Blob) => {
    const form = new FormData();
    form.append('file', file);
    return axios.post(api, form).then(res => res.data)
  })

  const [crop, setCrop] = useState({ x: 0, y: 0 })
  const [zoom, setZoom] = useState(1)
  const [blob, setBlob] = useState<Blob>()
  const [outputBlob, setOutputBlob] = useState<Blob>();
  const inputRef = createRef<HTMLInputElement>();
  const outputRef = useRef<Area>();

  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {
    outputRef.current = croppedAreaPixels
  }, [])

  const blobURL = useMemo(() => blob && URL.createObjectURL(blob), [blob]);

  const onConfirm = useCallback(async () => {
    if (!blobURL || !outputRef.current) {
      return;
    }
    const b = await getOutput(blobURL, outputRef.current, [336, 336]);
    console.log(b, b && URL.createObjectURL(b));


    if (!b) {
      return
    }
    setOutputBlob(b);
    mutation.mutate(b);

  }, [blobURL]);

  const submitDom = useMemo(() => outputBlob && <SubmitPage img={outputBlob} />, [outputBlob])

  return (
    <div >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://cdn.jsdelivr.net/npm/daisyui@1.22.2/dist/full.css" rel="stylesheet" type="text/css" />
        <script src="https://cdn.tailwindcss.com/3.0.11"></script>
      </Head>

      <main >
        <h1 >
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <div className="app flex flex-col items-center w-full h-full pt-10 bg-base-200">

          <div className="avatar">
            <div style={{ position: 'relative', width: 336, height: 336, }} className="container mx-auto border  rounded" >
              <Cropper
                image={blobURL}
                crop={crop}
                zoom={zoom}
                zoomSpeed={0.1}
                aspect={1}
                onCropChange={setCrop}
                onCropComplete={onCropComplete}
                onZoomChange={setZoom}
                cropSize={{ width: 224, height: 224 }}
              />
              {!blobURL && <div className="absolute h-full w-full top-0 left-0 opacity-60 flex flex-col items-center justify-center" style={{ backgroundColor: '#ccc' }} onClick={()=>inputRef.current?.click()}>
                <Image height={80} width={80} src="/face-id-svgrepo-com.svg"/>
                <div>please select an image</div>
              </div>}
            </div>
          </div>
          <div className="container mx-auto py-8 text-center	">
            <input
              type="range"
              value={zoom}
              min={1}
              max={3}
              step={0.1}
              aria-labelledby="Zoom"
              onChange={(e) => {
                setZoom(Number(e.target.value))
              }}
              className="zoom-range max-w-lg	w-52 "
            />

          </div>

          <div className=" container mx-auto flex max-w-lg">
            <input type="file" ref={inputRef} className="hidden" onChange={e => { console.log(e.target.value, e.target.files); setBlob(e.target.files ? e.target.files[0] : void 0); }} onClick={(e) => (e.target as any).value = ''} />

            <button onClick={() => inputRef.current?.click()} className="mx-auto w-52 h-10 block border rounded	border-slate-500	my-8">Upload</button>


            <button onClick={onConfirm} className="mx-auto w-52 h-10 block border rounded	border-slate-500	my-8">Confirm</button>


          </div>
          <div className="text-right  mx-1 ">
            {submitDom}

          </div>

          <section className="mx-auto max-w-lg	 mb-10 mt-5">
            {
              mutation.data && <div>
                <p>result: {mutation.data.name}</p> <p>maybe {mutation.data.possible.join(' or ')}</p>
              </div>
            }
            {
              mutation.isLoading && 'loading...'
            }
            {
              mutation.isError && String(mutation.error)
            }
          </section>

        </div>


      </main>

    </div>
  )
}


export default function App({ }) {
  const queryClient = new QueryClient()

  return (
    <QueryClientProvider client={queryClient} >
      <Home />
    </QueryClientProvider>
  );
}

